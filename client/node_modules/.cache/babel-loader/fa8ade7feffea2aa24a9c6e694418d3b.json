{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aidan/Desktop/expense-tracker/client/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\"; // Initial State\n\nconst initialState = {\n  transactions: [] // transactions: [\n  //   { id: 1, text: \"Flower\", amount: -20 },\n  //   { id: 2, text: \"Salary\", amount: 300 },\n  //   { id: 3, text: \"Book\", amount: -10 },\n  //   { id: 4, text: \"Camera\", amount: 150 },\n  // ],\n\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Provider component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  // whenever we want to call a reducer action we need to use the dispatch from useReducer\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n\n  async function getTransactions() {\n    try {\n      const res = await axios.get(\"/api/v1/transactions\");\n      dispatch({\n        type: \"GET_TRANSACTIONS\",\n        payload: res.data.data\n      }); // res.data.data\n    } catch (err) {}\n  }\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: \"DELETE_TRANSACTION\",\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: \"ADD_TRANSACTION\",\n      payload: transaction\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      deleteTransaction,\n      addTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/aidan/Desktop/expense-tracker/client/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","axios","initialState","transactions","GlobalContext","GlobalProvider","children","state","dispatch","getTransactions","res","get","type","payload","data","err","deleteTransaction","id","addTransaction","transaction"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,EADK,CAEnB;AACA;AACA;AACA;AACA;AACA;;AAPmB,CAArB,C,CAUA;;AACA,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAACI,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMG,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC9C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,UAAU,CAACC,UAAD,EAAaE,YAAb,CAApC,CAF8C,CAI9C;;AACA,iBAAeO,eAAf,GAAiC;AAC/B,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,sBAAV,CAAlB;AAEAH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE,kBADC;AAEPC,QAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASA;AAFX,OAAD,CAAR,CAHE,CAOF;AACD,KARD,CAQE,OAAOC,GAAP,EAAY,CAAE;AACjB;;AAED,WAASC,iBAAT,CAA2BC,EAA3B,EAA+B;AAC7BT,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,oBADC;AAEPC,MAAAA,OAAO,EAAEI;AAFF,KAAD,CAAR;AAID;;AAED,WAASC,cAAT,CAAwBC,WAAxB,EAAqC;AACnCX,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,iBADC;AAEPC,MAAAA,OAAO,EAAEM;AAFF,KAAD,CAAR;AAID;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLhB,MAAAA,YAAY,EAAEI,KAAK,CAACJ,YADf;AAELa,MAAAA,iBAFK;AAGLE,MAAAA;AAHK,KADT;AAAA,cAOGZ;AAPH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA1CM;;GAAMD,c;;KAAAA,c","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\n\n// Initial State\nconst initialState = {\n  transactions: [],\n  // transactions: [\n  //   { id: 1, text: \"Flower\", amount: -20 },\n  //   { id: 2, text: \"Salary\", amount: 300 },\n  //   { id: 3, text: \"Book\", amount: -10 },\n  //   { id: 4, text: \"Camera\", amount: 150 },\n  // ],\n};\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n  // whenever we want to call a reducer action we need to use the dispatch from useReducer\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  // Actions\n  async function getTransactions() {\n    try {\n      const res = await axios.get(\"/api/v1/transactions\");\n\n      dispatch({\n        type: \"GET_TRANSACTIONS\",\n        payload: res.data.data,\n      });\n      // res.data.data\n    } catch (err) {}\n  }\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: \"DELETE_TRANSACTION\",\n      payload: id,\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: \"ADD_TRANSACTION\",\n      payload: transaction,\n    });\n  }\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}