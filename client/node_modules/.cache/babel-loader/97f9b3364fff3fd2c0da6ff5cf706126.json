{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aidan/Desktop/expense-tracker/client/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\"; // // Initial State\n\nconst initialState = {\n  //   transactions: [],\n  error: null,\n  loading: true,\n  transactions: [{\n    id: 1,\n    text: \"Flower\",\n    amount: -20\n  }, {\n    id: 2,\n    text: \"Salary\",\n    amount: 300\n  }, {\n    id: 3,\n    text: \"Book\",\n    amount: -10\n  }, {\n    id: 4,\n    text: \"Camera\",\n    amount: 150\n  }]\n}; // Create context\n// We pull global state into each component by pulling in this GlobalContext\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // GlobalProvider wrapper around app component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  // whenever we want to call a reducer action we need to use the dispatch from useReducer\n  //useReducer takes in the global state and the global reducer\n  //gives us access to the reducer in the top component GlobalProvider which sits just under App\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  return (\n    /*#__PURE__*/\n    //allows access to state anywhere we use it in the app - wraps entire app\n    //provider provides the state and actions to be used in the components its wrapped around\n    _jsxDEV(GlobalContext.Provider, {\n      value: {\n        transactions: state.transactions\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this)\n  ); // Actions\n  //   async function getTransactions() {\n  //     try {\n  //       const res = await axios.get(\"/api/v1/transactions\");\n  //       dispatch({\n  //         type: \"GET_TRANSACTIONS\",\n  //         payload: res.data.data,\n  //       });\n  //       // res.data.data\n  //     } catch (err) {\n  //       dispatch({\n  //         type: \"TRANSACTION_ERROR\",\n  //         payload: err.response.data.error,\n  //       });\n  //     }\n  //   }\n  //   async function deleteTransaction(id) {\n  //     try {\n  //       await axios.delete(`/api/v1/transactions/${id}`);\n  //       dispatch({\n  //         type: \"DELETE_TRANSACTION\",\n  //         payload: id,\n  //       });\n  //     } catch (err) {\n  //       dispatch({\n  //         type: \"TRANSACTION_ERROR\",\n  //         payload: err.response.data.error,\n  //       });\n  //     }\n  //   }\n  //   async function addTransaction(transaction) {\n  //     const config = {\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //     };\n  //     try {\n  //       const res = await axios.post(\"/api/v1/transactions\", transaction, config);\n  //       dispatch({\n  //         type: \"ADD_TRANSACTION\",\n  //         payload: res.data.data,\n  //       });\n  //     } catch (err) {\n  //       dispatch({\n  //         type: \"TRANSACTION_ERROR\",\n  //         payload: err.response.data.error,\n  //       });\n  //     }\n  //   }\n  //   // function addTransaction(transaction) {\n  //   //   dispatch({\n  //   //     type: \"ADD_TRANSACTION\",\n  //   //     payload: transaction,\n  //   //   });\n  //   // }\n  //   return (\n  //     <GlobalContext.Provider\n  //       value={{\n  //         transactions: state.transactions,\n  //         error: state.error,\n  //         loading: state.loading,\n  //         getTransactions,\n  //         deleteTransaction,\n  //         addTransaction,\n  //       }}\n  //     >\n  //       {children}\n  //     </GlobalContext.Provider>\n  //   );\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/aidan/Desktop/expense-tracker/client/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","axios","initialState","error","loading","transactions","id","text","amount","GlobalContext","GlobalProvider","children","state","dispatch"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnB;AACAC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,YAAY,EAAE,CACZ;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,MAAM,EAAE,CAAC;AAAlC,GADY,EAEZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,MAAM,EAAE;AAAjC,GAFY,EAGZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,MAAf;AAAuBC,IAAAA,MAAM,EAAE,CAAC;AAAhC,GAHY,EAIZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,MAAM,EAAE;AAAjC,GAJY;AAJK,CAArB,C,CAYA;AACA;;AACA,OAAO,MAAMC,aAAa,gBAAGX,aAAa,CAACI,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMQ,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC9C;AACA;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,UAAU,CAACC,UAAD,EAAaE,YAAb,CAApC;AAEA;AAAA;AACE;AACA;AACA,YAAC,aAAD,CAAe,QAAf;AACE,MAAA,KAAK,EAAE;AACLG,QAAAA,YAAY,EAAEO,KAAK,CAACP;AADf,OADT;AAAA,gBAKGM;AALH;AAAA;AAAA;AAAA;AAAA;AAHF,IAN8C,CAiB9C;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA5FM;;GAAMD,c;;KAAAA,c","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\n\n// // Initial State\nconst initialState = {\n  //   transactions: [],\n  error: null,\n  loading: true,\n  transactions: [\n    { id: 1, text: \"Flower\", amount: -20 },\n    { id: 2, text: \"Salary\", amount: 300 },\n    { id: 3, text: \"Book\", amount: -10 },\n    { id: 4, text: \"Camera\", amount: 150 },\n  ],\n};\n\n// Create context\n// We pull global state into each component by pulling in this GlobalContext\nexport const GlobalContext = createContext(initialState);\n\n// GlobalProvider wrapper around app component\nexport const GlobalProvider = ({ children }) => {\n  // whenever we want to call a reducer action we need to use the dispatch from useReducer\n  //useReducer takes in the global state and the global reducer\n  //gives us access to the reducer in the top component GlobalProvider which sits just under App\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  return (\n    //allows access to state anywhere we use it in the app - wraps entire app\n    //provider provides the state and actions to be used in the components its wrapped around\n    <GlobalContext.Provider\n      value={{\n        transactions: state.transactions,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n  // Actions\n  //   async function getTransactions() {\n  //     try {\n  //       const res = await axios.get(\"/api/v1/transactions\");\n\n  //       dispatch({\n  //         type: \"GET_TRANSACTIONS\",\n  //         payload: res.data.data,\n  //       });\n  //       // res.data.data\n  //     } catch (err) {\n  //       dispatch({\n  //         type: \"TRANSACTION_ERROR\",\n  //         payload: err.response.data.error,\n  //       });\n  //     }\n  //   }\n\n  //   async function deleteTransaction(id) {\n  //     try {\n  //       await axios.delete(`/api/v1/transactions/${id}`);\n\n  //       dispatch({\n  //         type: \"DELETE_TRANSACTION\",\n  //         payload: id,\n  //       });\n  //     } catch (err) {\n  //       dispatch({\n  //         type: \"TRANSACTION_ERROR\",\n  //         payload: err.response.data.error,\n  //       });\n  //     }\n  //   }\n\n  //   async function addTransaction(transaction) {\n  //     const config = {\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //     };\n\n  //     try {\n  //       const res = await axios.post(\"/api/v1/transactions\", transaction, config);\n  //       dispatch({\n  //         type: \"ADD_TRANSACTION\",\n  //         payload: res.data.data,\n  //       });\n  //     } catch (err) {\n  //       dispatch({\n  //         type: \"TRANSACTION_ERROR\",\n  //         payload: err.response.data.error,\n  //       });\n  //     }\n  //   }\n  //   // function addTransaction(transaction) {\n  //   //   dispatch({\n  //   //     type: \"ADD_TRANSACTION\",\n  //   //     payload: transaction,\n  //   //   });\n  //   // }\n\n  //   return (\n  //     <GlobalContext.Provider\n  //       value={{\n  //         transactions: state.transactions,\n  //         error: state.error,\n  //         loading: state.loading,\n  //         getTransactions,\n  //         deleteTransaction,\n  //         addTransaction,\n  //       }}\n  //     >\n  //       {children}\n  //     </GlobalContext.Provider>\n  //   );\n};\n"]},"metadata":{},"sourceType":"module"}