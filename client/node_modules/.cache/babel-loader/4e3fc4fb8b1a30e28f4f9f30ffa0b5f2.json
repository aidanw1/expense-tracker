{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aidan/Desktop/expense-tracker/client/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\"; // // Initial State\n\nconst initialState = {\n  transactions: [],\n  error: null,\n  loading: true //once weve made the request set it to false in the reducer\n  // transactions: [\n  //   { id: 1, text: \"Flower\", amount: -20 },\n  //   { id: 2, text: \"Salary\", amount: 300 },\n  //   { id: 3, text: \"Book\", amount: -10 },\n  //   { id: 4, text: \"Camera\", amount: 150 },\n  // ],\n\n}; // Create context\n// We pull global state into each component by pulling in this GlobalContext\n// Then pull anything out of global context by using the useContext hook\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // GlobalProvider wrapper around app component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  // whenever we want to call a reducer action we need to use the dispatch from useReducer\n  //useReducer takes in the global state and the global reducer\n  //gives us access to the reducer in the top component GlobalProvider which sits just under App\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions - we need to run a new action to fetch from the backend\n\n  async function getTransactions() {\n    try {\n      const res = await axios.get(\"/api/v1/transactions\"); //proxy added http://localhost:5000/api/v1/transactions\n      //res.data will give back the entire object, so need to add another data to the end res.data.data to get the transactions\n\n      dispatch({\n        type: \"GET_TRANSACTIONS\",\n        payload: res.data.data //transactions from backend\n\n      });\n    } catch (err) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: err.response.data.error //gives us back the error we usually see in postman when error occurs\n\n      });\n    }\n  } //takes in id to know which one to delete\n\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: \"DELETE_TRANSACTION\",\n      payload: id //any data we want to send to the reducer (sending the id)\n\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: \"ADD_TRANSACTION\",\n      payload: transaction // (sending the entire object)\n\n    });\n  } // WITHOUT NODE\n  // //takes in id to know which one to delete\n  // function deleteTransaction(id) {\n  //   dispatch({\n  //     type: \"DELETE_TRANSACTION\",\n  //     payload: id, //any data we want to send to the reducer (sending the id)\n  //   });\n  // }\n  // function addTransaction(transaction) {\n  //   dispatch({\n  //     type: \"ADD_TRANSACTION\",\n  //     payload: transaction, // (sending the entire object)\n  //   });\n  // }\n\n\n  return (\n    /*#__PURE__*/\n    //allows access to state anywhere we use it in the app - wraps entire app\n    //provider provides the state and actions to be used in the components its wrapped around\n    _jsxDEV(GlobalContext.Provider, {\n      value: {\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/aidan/Desktop/expense-tracker/client/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","axios","initialState","transactions","error","loading","GlobalContext","GlobalProvider","children","state","dispatch","getTransactions","res","get","type","payload","data","err","response","deleteTransaction","id","addTransaction","transaction"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,EADK;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,OAAO,EAAE,IAHU,CAGJ;AACf;AACA;AACA;AACA;AACA;AACA;;AATmB,CAArB,C,CAYA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,gBAAGR,aAAa,CAACI,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMK,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC9C;AACA;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,UAAU,CAACC,UAAD,EAAaE,YAAb,CAApC,CAJ8C,CAM9C;;AACA,iBAAeS,eAAf,GAAiC;AAC/B,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAU,sBAAV,CAAlB,CADE,CACmD;AACrD;;AAEAH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE,kBADC;AAEPC,QAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASA,IAFX,CAEiB;;AAFjB,OAAD,CAAR;AAID,KARD,CAQE,OAAOC,GAAP,EAAY;AACZP,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE,mBADC;AAEPC,QAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBZ,KAFpB,CAE2B;;AAF3B,OAAD,CAAR;AAID;AACF,GAtB6C,CAwB9C;;;AACA,WAASe,iBAAT,CAA2BC,EAA3B,EAA+B;AAC7BV,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,oBADC;AAEPC,MAAAA,OAAO,EAAEK,EAFF,CAEM;;AAFN,KAAD,CAAR;AAID;;AAED,WAASC,cAAT,CAAwBC,WAAxB,EAAqC;AACnCZ,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,iBADC;AAEPC,MAAAA,OAAO,EAAEO,WAFF,CAEe;;AAFf,KAAD,CAAR;AAID,GArC6C,CAuC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACE;AACA;AACA,YAAC,aAAD,CAAe,QAAf;AACE,MAAA,KAAK,EAAE;AACLnB,QAAAA,YAAY,EAAEM,KAAK,CAACN,YADf;AAELgB,QAAAA,iBAFK;AAGLE,QAAAA;AAHK,OADT;AAAA,gBAOGb;AAPH;AAAA;AAAA;AAAA;AAAA;AAHF;AAaD,CApEM;;GAAMD,c;;KAAAA,c","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\n\n// // Initial State\nconst initialState = {\n  transactions: [],\n  error: null,\n  loading: true, //once weve made the request set it to false in the reducer\n  // transactions: [\n  //   { id: 1, text: \"Flower\", amount: -20 },\n  //   { id: 2, text: \"Salary\", amount: 300 },\n  //   { id: 3, text: \"Book\", amount: -10 },\n  //   { id: 4, text: \"Camera\", amount: 150 },\n  // ],\n};\n\n// Create context\n// We pull global state into each component by pulling in this GlobalContext\n// Then pull anything out of global context by using the useContext hook\nexport const GlobalContext = createContext(initialState);\n\n// GlobalProvider wrapper around app component\nexport const GlobalProvider = ({ children }) => {\n  // whenever we want to call a reducer action we need to use the dispatch from useReducer\n  //useReducer takes in the global state and the global reducer\n  //gives us access to the reducer in the top component GlobalProvider which sits just under App\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  // Actions - we need to run a new action to fetch from the backend\n  async function getTransactions() {\n    try {\n      const res = await axios.get(\"/api/v1/transactions\"); //proxy added http://localhost:5000/api/v1/transactions\n      //res.data will give back the entire object, so need to add another data to the end res.data.data to get the transactions\n\n      dispatch({\n        type: \"GET_TRANSACTIONS\",\n        payload: res.data.data, //transactions from backend\n      });\n    } catch (err) {\n      dispatch({\n        type: \"TRANSACTION_ERROR\",\n        payload: err.response.data.error, //gives us back the error we usually see in postman when error occurs\n      });\n    }\n  }\n\n  //takes in id to know which one to delete\n  function deleteTransaction(id) {\n    dispatch({\n      type: \"DELETE_TRANSACTION\",\n      payload: id, //any data we want to send to the reducer (sending the id)\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: \"ADD_TRANSACTION\",\n      payload: transaction, // (sending the entire object)\n    });\n  }\n\n  // WITHOUT NODE\n  // //takes in id to know which one to delete\n  // function deleteTransaction(id) {\n  //   dispatch({\n  //     type: \"DELETE_TRANSACTION\",\n  //     payload: id, //any data we want to send to the reducer (sending the id)\n  //   });\n  // }\n\n  // function addTransaction(transaction) {\n  //   dispatch({\n  //     type: \"ADD_TRANSACTION\",\n  //     payload: transaction, // (sending the entire object)\n  //   });\n  // }\n\n  return (\n    //allows access to state anywhere we use it in the app - wraps entire app\n    //provider provides the state and actions to be used in the components its wrapped around\n    <GlobalContext.Provider\n      value={{\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}