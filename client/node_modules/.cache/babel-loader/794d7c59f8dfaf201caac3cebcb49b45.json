{"ast":null,"code":"export default ((state, action) => {\n  switch (action.type) {\n    case \"DELETE_TRANSACTION\":\n      return { ...state,\n        transactions: state.transactions.filter(transaction => transaction.id !== action.payload) //send down all the transactions except the one that was deleted (id is sent in the payload in the action)\n\n      };\n\n    default:\n      return state;\n  }\n}); // export default (state, action) => {\n//   switch (action.type) {\n//     case \"GET_TRANSACTIONS\":\n//       return {\n//         ...state,\n//         loading: false,\n//         transactions: action.payload,\n//       };\n//     case \"DELETE_TRANSACTION\":\n//       return {\n//         ...state,\n//         transactions: state.transactions.filter(\n//           (transaction) => transaction._id !== action.payload\n//         ),\n//       };\n//     case \"ADD_TRANSACTION\":\n//       return {\n//         ...state,\n//         //takes new transaction payload being added from the action and a copy of state\n//         transactions: [...state.transactions, action.payload],\n//         // transactions: [action.payload, ...state.transactions],\n//         //when we added from state when we added a new transaction the new one comes with a payload and gets put at the top\n//         //when we fetch from the api its the other way around (most current is at the end)\n//       };\n//     case \"TRANSACTION_ERROR\":\n//       return {\n//         ...state,\n//         error: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// };","map":{"version":3,"sources":["/Users/aidan/Desktop/expense-tracker/client/src/context/AppReducer.js"],"names":["state","action","type","transactions","filter","transaction","id","payload"],"mappings":"AAAA,gBAAe,CAACA,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,oBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,YAAY,EAAEH,KAAK,CAACG,YAAN,CAAmBC,MAAnB,CACXC,WAAD,IAAiBA,WAAW,CAACC,EAAZ,KAAmBL,MAAM,CAACM,OAD/B,CAFT,CAKL;;AALK,OAAP;;AAOF;AACE,aAAOP,KAAP;AAVJ;AAYD,CAbD,E,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export default (state, action) => {\n  switch (action.type) {\n    case \"DELETE_TRANSACTION\":\n      return {\n        ...state,\n        transactions: state.transactions.filter(\n          (transaction) => transaction.id !== action.payload\n        ),\n        //send down all the transactions except the one that was deleted (id is sent in the payload in the action)\n      };\n    default:\n      return state;\n  }\n};\n// export default (state, action) => {\n//   switch (action.type) {\n//     case \"GET_TRANSACTIONS\":\n//       return {\n//         ...state,\n//         loading: false,\n//         transactions: action.payload,\n//       };\n//     case \"DELETE_TRANSACTION\":\n//       return {\n//         ...state,\n//         transactions: state.transactions.filter(\n//           (transaction) => transaction._id !== action.payload\n//         ),\n//       };\n//     case \"ADD_TRANSACTION\":\n//       return {\n//         ...state,\n//         //takes new transaction payload being added from the action and a copy of state\n//         transactions: [...state.transactions, action.payload],\n//         // transactions: [action.payload, ...state.transactions],\n//         //when we added from state when we added a new transaction the new one comes with a payload and gets put at the top\n//         //when we fetch from the api its the other way around (most current is at the end)\n//       };\n//     case \"TRANSACTION_ERROR\":\n//       return {\n//         ...state,\n//         error: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}